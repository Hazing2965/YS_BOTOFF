import asyncio
import logging
import random
import threading
from os import getenv
from dotenv import load_dotenv

from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api import VkApi
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='[{asctime}] #{levelname:8} {filename}:{lineno} - {name} - "{message}"',
    style='{')

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VK API
VK_TOKEN = getenv('VK_TOKEN')
GROUP_ID = getenv('VK_GROUP_ID')
vk_session = VkApi(token=VK_TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk_api = vk_session.get_api()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Aiogram
TG_TOKEN = getenv('TG_TOKEN')
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()



# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
COMMON_RESPONSE = ("–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ(https://cchgeu.ru/studentu/schedule).\n"
                   "–ú—ã –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ä–∞–∑—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–±–æ—Ç—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è.\n"
                   "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üòä")

### VK BOT ###

def vk_bot():
    logger.info("VK Bot started")
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW and event.from_user:
                    logger.info('New_message_VK')
                    user_id = event.message["peer_id"]
                    vk_api.messages.send(
                        peer_id=user_id,
                        random_id=random.randint(1,99999),
                        message=COMMON_RESPONSE,
                    )
                # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ callback –∫–Ω–æ–ø–∫–∞–º
                elif event.type == VkBotEventType.MESSAGE_EVENT:
                    logger.info('New_callback_VK')
                    # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id = event.object.user_id
                    vk_api.messages.send(
                        peer_id=user_id,
                        random_id=random.randint(1, 99999),
                        message=COMMON_RESPONSE,
                    )
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ vk_bot: {e}')

### TELEGRAM BOT ###

@dp.message()
async def wtf_send(message: Message):
    await message.answer(COMMON_RESPONSE)

@dp.callback_query()
async def wtf_send(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, COMMON_RESPONSE)

async def tg_bot():
    logger.info("Telegram Bot started")
    await bot.delete_webhook(drop_pending_updates=False)
    await dp.start_polling(bot, )

### –ó–ê–ü–£–°–ö ###
# async def main():
#     # # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
#     # await asyncio.gather(
#     #     vk_bot(),
#     #     tg_bot()
#     # )
#     # –ü–æ—Ç–æ–∫ –¥–ª—è VK API
#     vk_thread = threading.Thread(target=vk_bot)
#     vk_thread.start()
#
#     # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è Telegram-–±–æ—Ç–∞
#     asyncio.run(tg_bot())
#
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
async def run_vk_bot():
    await asyncio.to_thread(vk_bot)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫ VK –∏ Telegram-–±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(
        run_vk_bot(),
        tg_bot()
    )


if __name__ == "__main__":
    asyncio.run(main())